const config = require("../config")

// const ENGLISH_NAMES = ["Eddie","Jeffry","Garth","Sung","Mack","Lesley","Bruno","Lenard","Manual","Barney","Delmar","Alonzo","Pete","Salvatore","Antwan","Fritz","Darwin","Rory","Boyce","Korey","Dannie","Daron","Dario","German","Young","Lucas","Desmond","Berry","Teddy","Roman","Arden","Kurt","Markus","Roosevelt","Willie","Carmen","Cortez","Winston","Tyson","Burt","Sidney","Mauricio","Graham","Terence","Edwin","Rick","Mervin","Loren","Shannon","Will","Rod","Dante","Filiberto","Lyndon","Bruce","Michel","Abdul","Napoleon","Domingo","Darron","Damon","Nicky","Josue","Matthew","Jacob","Hugh","Cedric","Donovan","Chauncey"];
const ENGLISH_NAMES = [
    "Liam",
    "Olivia",
    "Emma",
    "Noah",
    "William",
    "Avatae123",
    "Isabella",
    "chenchuantuan",
    "Sophia",
    "linhongyu ",
    "Charlotte",
    "Mynguyen55",
    "zhao liang di",
    "Amelia",
    "Lucas",
    "Amelia",
    "Danhtan1197",
    "Mason",
    "Logan",
    "Evelyn",
    "Harper",
    "Rebecca",
    "Laura",
    "Jeffrey",
    "Khanhbanh1997",
    "Gary",
    "Rebecca",
    "Nicholas",
    "Brenda",
    "Laytien123",
    "Benjamin",
    "Christine",
    "Dennis",
    "Kelly",
    "Victoria",
    "Thanhvinh2",
    "Christina122",
    "Walter11",
    "Zacharygg",
    "Evelyn1i",
    "Kylehyy",
    "Keithin",
    "Hotbac123",
    "Lawrence54",
    "Alice55",
    "Jacquelinerr",
    "Doris544",
    "Dylan77",
    "Beverly",
    "Ralph",
    "Sara666tt",
    "Madison",
    "Brittany",
    "Sapgiau123",
    "Alexis",
    "Bobby",
    "Bradley",
    "Natalie1",
    "Janeness2",
    "Brittany",
    "Janetyty",
    "Lorire68",
    "chenchuantuan",
    "linhongyu",
    "zhaoliangdi",
    "dongyuan",
    "ana",
    "zhimingxin",
    "luaoning",
    "xucheng",
    "chensen",
    "zhangxiaoyu",
    "chenfeifei",
    "qinshang",
    "chenguangmeng",
    "chenqiulan",
    "chensi",
    "chenyueshan",
    "dumoli",
    "leiting",
    "cengxingan",
    "hanyubing",
    "huanghongquan",
    "huganglei",
    "huainan",
    "huangcha",
    "jianjun",
    "jingde",
    "lichengzhong",
    "lihailong",
    "liwenhai",
    "liufeng",
    "liuhuizhen",
    "liuxiaotai",
    "luli",
    "luoshifang",
    "lushiluan",
    "lianxi",
    "shaominyu",
    "hongzhiyun",
    "hehong",
    "rujinghong",
    "fengjun",
    "oushaoman",
    "peiwenzheng",
    "meixian",
    "ruanwencang",
    "xieqiuxuan",
    "shenjiajia",
    "tangqunfang",
    // "Abigail99",
    // "Jompeng22",
    // "Vincentkobe",
    // "Cynthiava",
    // "Kathleenji",
    // "Ryanty4",
    // "Stephenre",
    // "Larryka11",
    // "Sharondor",
    // "Melissa",
    // "Emily123",
    // "Donna",
    // "Ashley",
    // "Sandraaa",
    // "Kimberlyac",
    // "Jayesh1106",
    // "Markurt",
    // "Margaret54",
    // "Susanno",
    // "DoDavidmai",
    // "Elizabeth",
    // "Paolo123",
    // "Nancy655",
    // "Stevenbu",
    // "Ashleyca",
    // "Margaret",
    // "Jonathan2019",
    // "JustinB",
    // "IceRose",
    // "Evelyn",
    // "Dianestusai",
    // "Sukisca",
    // "KinG25",
    // "Ph4nT0mBack",
    // "Ssituan",
    // "Speedtudy",
    // "Oignesha78600",
    // "Cuibap2019",
    // "Trieuphu456",
]

const RATIO_FEES_GAME = config.GAME_FEES

const AUTO_BET_SCRIPTS = [
    {
        id: "2058712c-cf83-4321-8ed2-b0f7a2d44a2a",
        name: "Flat Bet",
        text:
            "var config = {\n  wager: {\n    value: 100, type: 'balance', label: 'wager'\n  },\n  payout: {\n    value: 2, type: 'multiplier', label: 'payout' }\n};\n\n// Try to bet immediately when script starts\nif (engine.gameState === \"GAME_STARTING\") {\n  makeBet();\n}\n\nengine.on('GAME_STARTING', onGameStarted);\nengine.on('GAME_ENDED', onGameEnded);\n\nfunction onGameStarted() {\n  makeBet();\n}\n\nfunction onGameEnded() {\n  var lastGame = engine.history.first();\n\n  // If we wagered, it means we played\n  if (!lastGame.wager) {\n    return;\n  }\n\n  if (lastGame.cashedAt) {\n    var profit = Math.round((config.wager.value * config.payout.value - config.wager.value) / 100)\n    log('we won', profit, 'bits');\n  } else {\n    log('we lost', Math.round(config.wager.value / 100), 'bits');\n  }\n}\n\nfunction makeBet() {\n  engine.bet(config.wager.value, config.payout.value);\n  log('betting', Math.round(config.wager.value / 100), 'on', config.payout.value, 'x');\n}",
        isSample: true,
        config: {
            wager: {
                value: 100,
                type: "balance",
                label: "wager",
            },
            payout: {
                value: 2,
                type: "multiplier",
                label: "payout",
            },
        },
    },
    {
        id: "8d7f6bfb-f309-47f1-a87c-87f941e5d2db",
        name: "Sniper",
        text:
            "var config = {\n  target: { value: '', type: 'text', label: 'User to follow' },\n  maxBet: { value: 1e8, type: 'balance', label: 'Max Bet' }\n};\n\n\nengine.on('BET_PLACED', bet => {\n  if (bet.uname.toLowerCase() === config.target.value.toLowerCase()) {\n    if (userInfo.balance < 100) {\n      stop('Your balance is too low to bet.');\n    }\n\n    log('Spotted', bet.uname, 'betting', bet.wager / 100, 'bit(s) with a', bet.payout + 'x payout.');\n\n    const bettableBalance = Math.floor(userInfo.balance / 100) * 100;\n    const wager = Math.min(bettableBalance, bet.wager, config.maxBet.value);\n\n    if (engine.gameState != 'GAME_STARTING') {\n      // do not queue the bet if the current game is no longer accepting bets\n      return;\n    }\n\n    engine.bet(wager, bet.payout); // aim at target's payout\n  }\n});\n\nengine.on('CASHED_OUT', cashOut => {\n  if (cashOut.uname.toLowerCase() === config.target.value.toLowerCase()) {\n    log('Spotted', cashOut.uname, 'cashing out at', cashOut.cashedAt + 'x.');\n\n    if (engine.currentlyPlaying()) {\n      engine.cashOut();\n    }\n  }\n})",
        isSample: true,
    },
    {
        id: "c98ba087-e420-4fcc-812f-e77825a3666c",
        name: "Martingale",
        text:
            "var config = {\n  baseBet: { value: 100, type: 'balance', label: 'base bet' },\n  payout: { value: 2, type: 'multiplier' },\n  stop: { value: 1e8, type: 'balance', label: 'stop if bet >' },\n  loss: {\n    value: 'increase', type: 'radio', label: 'On Loss',\n    options: {\n      base: { type: 'noop', label: 'Return to base bet' },\n      increase: { value: 2, type: 'multiplier', label: 'Increase bet by' },\n    }\n  },\n  win: {\n    value: 'base', type: 'radio', label: 'On Win',\n    options: {\n      base: { type: 'noop', label: 'Return to base bet' },\n      increase: { value: 2, type: 'multiplier', label: 'Increase bet by' },\n    }\n  }\n};\n\n\nlog('Script is running..');\n\nvar currentBet = config.baseBet.value;\n\n// Always try to bet when script is started\nengine.bet(roundBit(currentBet), config.payout.value);\n\nengine.on('GAME_STARTING', onGameStarted);\nengine.on('GAME_ENDED', onGameEnded);\n\nfunction onGameStarted() {\n  engine.bet(roundBit(currentBet), config.payout.value);\n}\n\nfunction onGameEnded() {\n  var lastGame = engine.history.first()\n\n  // If we wagered, it means we played\n  if (!lastGame.wager) {\n    return;\n  }\n\n  // we won..\n  if (lastGame.cashedAt) {\n    if (config.win.value === 'base') {\n      currentBet = config.baseBet.value;\n    } else {\n      console.assert(config.win.value === 'increase');\n      currentBet *= config.win.options.increase.value;\n    }\n    log('We won, so next bet will be', currentBet/100, 'bits')\n  } else {\n    // damn, looks like we lost :(\n    if (config.loss.value === 'base') {\n      currentBet = config.baseBet.value;\n    } else {\n      console.assert(config.loss.value === 'increase');\n      currentBet *= config.loss.options.increase.value;\n    }\n    log('We lost, so next bet will be', currentBet/100, 'bits')\n  }\n\n  if (currentBet > config.stop.value) {\n    log('Was about to bet', currentBet, 'which triggers the stop');\n    engine.removeListener('GAME_STARTING', onGameStarted);\n    engine.removeListener('GAME_ENDED', onGameEnded);\n  }\n}\n\nfunction roundBit(bet) {\n  return Math.round(bet / 100) * 100;\n}",
        isSample: true,
    },
    {
        id: "62c79c44-de34-4354-a5ee-03850e3916c1",
        name: "Payout Martingale",
        text:
            "var config = {\n  bet: {\n    value: 100,\n    type: 'balance'\n  },\n  basePayout: {\n    value: 2,\n    type: 'multiplier',\n    label: 'base payout'\n  },\n  stop: {\n    value: 20,\n    type: 'multiplier',\n    label: 'stop if payout >'\n  },\n  loss: {\n    value: 'increase',\n    type: 'radio',\n    label: 'On Loss',\n    options: {\n      base: {\n        type: 'noop',\n        label: 'Return to base payout'\n      },\n      increase: {\n        value: 1,\n        type: 'multiplier',\n        label: 'Increase payout by +'\n      },\n    }\n  },\n  win: {\n    value: 'base',\n    type: 'radio',\n    label: 'On Win',\n    options: {\n      base: {\n        type: 'noop',\n        label: 'Return to base payout'\n      },\n      increase: {\n        value: 1,\n        type: 'multiplier',\n        label: 'Increase payout by +'\n      },\n    }\n  }\n};\n\n\nlog('Script is running..');\n\nvar currentPayout = config.basePayout.value;\n\n// Always try to bet when script is started\nengine.bet(config.bet.value, currentPayout);\n\nengine.on('GAME_STARTING', onGameStarted);\nengine.on('GAME_ENDED', onGameEnded);\n\nfunction onGameStarted() {\n  log('betting', Math.round(config.bet.value / 100), 'at payout of', currentPayout, 'x')\n  engine.bet(config.bet.value, currentPayout);\n}\n\nfunction onGameEnded(info) {\n  var lastGame = engine.history.first()\n\n  // If we wagered, it means we played\n  if (!lastGame.wager) {\n    return;\n  }\n\n  // we won..\n  if (lastGame.cashedAt) {\n    if (config.win.value === 'base') {\n      currentPayout = config.basePayout.value;\n      log('won, so resetting payout to', currentPayout)\n    } else {\n      console.assert(config.win.value === 'increase');\n      currentPayout += config.win.options.increase.value;\n      log('won, so increasing payout to', currentPayout)\n    }\n  } else {\n    // damn, looks like we lost :(\n    if (config.loss.value === 'base') {\n      currentPayout = config.basePayout.value;\n      log('lost, so resetting payout to', currentPayout)\n    } else {\n      console.assert(config.loss.value === 'increase');\n      currentPayout += config.loss.options.increase.value;\n      log('lost, so increasing payout', currentPayout)\n    }\n  }\n\n  if (currentPayout > config.stop.value) {\n    log('Was about to bet with payout', currentPayout, 'which triggers the stop');\n    engine.removeListener('GAME_STARTING', onGameStarted);\n    engine.removeListener('GAME_ENDED', onGameEnded);\n  }\n}",
        isSample: true,
    },
    {
        id: "ab81594d-738a-4dba-aae5-d26b92fb4e51",
        name: "my-script-1",
        text: "var config = {\n};\n\nlog('simulation begins here')",
        isSample: false,
    },
    {
        id: "9f85ec65-fab7-44cf-8355-4871fbacb319",
        name: "Narrator",
        text:
            "var config = {\n  languages: {\n    value: 'en', type: 'radio', label: 'Speech language',\n    options: {\n      en: { value: 'en-US', type: 'noop', label: 'English' },\n      fr: { value: 'fr-FR', type: 'noop', label: 'Français' },\n      es: { value: 'es-ES', type: 'noop', label: 'Español' },\n    }\n  },\n  sayGameStarting: { value: false, type: 'checkbox', label: 'narrate GAME_STARTING events?' },\n  sayGameStarted: { value: true, type: 'checkbox', label: 'narrate GAME_STARTED events?' },\n  sayGameEnded: { value: true, type: 'checkbox', label: 'narrate GAME_ENDED events?' },\n  sayBetPlaced: { value: true, type: 'checkbox', label: 'narrate own BET_PLACED events?' },\n  sayCashedOut: { value: true, type: 'checkbox', label: 'narrate own CASHED_OUT events?' },\n  sayGameTick: { value: true, type: 'checkbox', label: 'narrate GAME_TICK events?' },\n  otherUsers: { value: \"\", type: 'text', label: 'Other users (comma separated)', optional: true },\n  sayOtherBets: { value: false, type: 'checkbox', label: \"narrate other users' bets?\" },\n  sayOtherCashOuts: { value: true, type: 'checkbox', label: \"narrate other users' cash-outs?\" },\n};\n\n// The speech's priority\nconst LOW_PRIORITY    = 0,\n      MEDIUM_PRIORITY = 1,\n      HIGH_PRIORITY   = 2;\n\n// The speech's speed\nconst NORMAL_RATE = 1.1,\n      FAST_RATE   = 1.3;\n\nvar previousPriority = 0;\nvar previousTick     = 0;\nvar previousSpeech   = \"\";\nvar otherUsers       = [];\n\n// Game events\n\nengine.on('GAME_STARTING', () => {\n  if (!config.sayGameStarting.value) return;\n  say(\"game starting\", LOW_PRIORITY)\n});\n\nengine.on('GAME_STARTED', () => {\n  if (!config.sayGameStarted.value) return;\n  say(\"game started\", HIGH_PRIORITY);\n});\n\nengine.on('GAME_ENDED', () => {\n  if (!config.sayGameEnded.value) return;\n  say(\"busted at \" + previousTick, HIGH_PRIORITY);\n});\n\nengine.on('BET_PLACED', bet => {\n  if (!config.sayBetPlaced.value) return;\n  if (bet.uname === userInfo.uname) {\n    say(\"bet \" + bet.wager / 100 + \" bits\", MEDIUM_PRIORITY);\n  }\n\n  // do not mark others' bets as prioritary so that we can hear ours!\n  if (shouldSayBet(bet.uname)) {\n    say(bet.uname + \" bet \" + bet.wager / 100 + \" bits\", LOW_PRIORITY);\n  }\n});\n\nengine.on('CASHED_OUT', cashOut => {\n  if (!config.sayCashedOut.value) return;\n  if (cashOut.uname === userInfo.uname) {\n    say(\"cashed out at \" + cashOut.cashedAt, HIGH_PRIORITY);\n  }\n\n  // mark others' cash-outs as medium priority so that we can hear ours!\n  if (shouldSayCashOut(cashOut.uname)) {\n    say(cashOut.uname + \"cashed out at \" + cashOut.cashedAt, MEDIUM_PRIORITY);\n  }\n});\n\nengine.on('GAME_TICK', tick => {\n  previousTick = tick;\n  if (!config.sayGameTick.value) return;\n\n  let amount = '';\n  let speed = 0;\n  // adjust decimals and speed according to multiplier\n  switch (true) {\n    case (tick <= 10):\n      amount = tick.toFixed(1);\n      speed = NORMAL_RATE;\n      break;\n    case (tick <= 100):\n      amount = tick.toFixed();\n      speed = NORMAL_RATE;\n    case (tick <= 1000):\n      amount = tick.toFixed();\n      speed = FAST_RATE;\n      break;\n    case (tick <= 10000):\n      amount = Math.round(tick / 100) * 100;\n      speed = FAST_RATE;\n      break;\n    default:\n      amount = Math.round(tick / 1000) * 1000;\n      speed = FAST_RATE;\n  }\n\n  if (previousSpeech !== amount) {\n    say(amount, LOW_PRIORITY, speed);\n  }\n\n  // do not say the same number twice\n  previousSpeech = amount;\n});\n\n/**\n * say() uses the Web Speech API to add speech synthesis to the script:\n * https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis\n */\nconst say = (speech, priority, speed = NORMAL_RATE) => {\n  if (typeof speechSynthesis === 'undefined') {\n    log(\"Your browser does not support speech synthesis :(\")\n    return;\n  }\n\n  if (speechSynthesis.speaking) {\n    if (priority === LOW_PRIORITY || priority < previousPriority) {\n      return;\n    }\n    // stop any lower priority ongoing speech\n    speechSynthesis.cancel();\n  }\n  previousPriority = priority;\n\n  var utterance = new SpeechSynthesisUtterance();\n  utterance.lang = config.languages.value;\n  utterance.rate = speed;\n  utterance.text = speech;\n  speechSynthesis.speak(utterance);\n};\n\nconst shouldSayBet = uname => {\n  return config.sayOtherBets.value && otherUsers.indexOf(uname) > -1;\n}\n\nconst shouldSayCashOut = uname => {\n  return config.sayOtherCashOuts.value && otherUsers.indexOf(uname) > -1;\n}\n\n(function convertUsersToArray(users) {\n  if (typeof users === 'string') {\n    if (users.indexOf(',') !== -1) {\n      otherUsers = users.split(',');\n      otherUsers.forEach(function(v, i) {\n        otherUsers[i] = v.replace(/\\s/g, '');\n      });\n    } else {\n      otherUsers.push(users);\n    }\n  }\n})(config.otherUsers.value);",
        isSample: true,
    },
]

const GAME_RESULT = {
    GREEN: 0,
    RED: 1,
}

module.exports = {
    ENGLISH_NAMES,
    RATIO_FEES_GAME,
    AUTO_BET_SCRIPTS,
    GAME_RESULT,
}
